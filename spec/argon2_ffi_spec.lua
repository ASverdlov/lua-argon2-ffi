local argon2 = require "argon2_ffi"

describe("argon2_ffi", function()
  describe("encrypt()", function()
    it("should throw error on invalid argument", function()
      assert.has_error(function()
        argon2.encrypt(nil)
      end, "bad argument #1 to 'encrypt' (string expected, got nil)")

      assert.has_error(function()
        argon2.encrypt("", nil)
      end, "bad argument #2 to 'encrypt' (string expected, got nil)")

      assert.has_error(function()
        argon2.encrypt("", "", "")
      end, "bad argument #3 to 'encrypt' (table expected, got string)")

      assert.has_error(function()
        argon2.encrypt("", "", {t_cost = ""})
      end, "expected t_cost to be a number")

      assert.has_error(function()
        argon2.encrypt("", "", {m_cost = ""})
      end, "expected m_cost to be a number")

      assert.has_error(function()
        argon2.encrypt("", "", {parallelism = ""})
      end, "expected parallelism to be a number")
    end)
  end)
  it("should return a hash", function()
    local hash, err = argon2.encrypt("password", "somesalt")
    assert.falsy(err)
    assert.equal("$argon2i$m=12,t=2,p=1$c29tZXNhbHQ$ltrjNRFqTXmsHj++TFGZxg+zSg8hSrrSJiViCRns1HM", hash)

    hash, err = argon2.encrypt("password2", "somesalt2")
    assert.falsy(err)
    assert.equal("$argon2i$m=12,t=2,p=1$c29tZXNhbHQy$nb+IxJGGftnQu8G8CMMOlqIOmz+0SK9/8/1fl5m/7GQ", hash)
  end)
  it("should hash with argon2d", function()
    local hash, err = argon2.encrypt("password", "somesalt", {argon2d = true})
    assert.falsy(err)
    assert.is_string(hash)
    assert.truthy(string.match(hash, "argon2d"))
  end)
  it("salt too short", function()
    local hash, err = argon2.encrypt("password", "")
    assert.falsy(hash)
    assert.equal("Salt is too short", err)

    hash, err = argon2.encrypt("password", "abcdefg")
    assert.falsy(hash)
    assert.equal("Salt is too short", err)
  end)
  it("should accept time cost", function()
    local hash, err = argon2.encrypt("password", "somesalt", {t_cost = 4})
    assert.falsy(err)
    assert.is_string(hash)
    assert.truthy(string.match(hash, "t=4"))
  end)
  it("should accept memory cost", function()
    local hash, err = argon2.encrypt("password", "somesalt", {m_cost = 13})
    assert.falsy(err)
    assert.is_string(hash)
    assert.truthy(string.match(hash, "m=13"))
  end)
  it("should accept parallelism", function()
    local hash, err = argon2.encrypt("password", "somesalt", {parallelism = 2, m_cost = 24})
    assert.falsy(err)
    assert.is_string(hash)
    assert.truthy(string.match(hash, "p=2"))
  end)
  it("should accept all options", function()
    local hash, err = argon2.encrypt("password", "somesalt", {
      t_cost = 4,
      m_cost = 24,
      parallelism = 2
    })
    assert.falsy(err)
    assert.is_string(hash)
    assert.truthy(string.match(hash, "m=24,t=4,p=2"))
  end)
end)
